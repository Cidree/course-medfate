---
title: "Exercise 4a guidelines"
author: "Rodrigo Balaguer"
date: '2024-11-13'
output: html
---

# Exercise setting

```{r}
#| include: false
library(pacman)

p_load(medfateland, sf, terra, tidyverse)
```


##  Objectives

Learn to initialized a landscape (creation of spatial inputs) to be used in **medfateland** model simulations.


## Data

The target area to be initialized corresponds to Barcelona county. It contains large areas covered by urban land-uses, some sparse agricultural zones and a northern belt of wildland area mostly dominated by P.halepensis stands. 


## Guidelines

1. Load package **medfateland**, **terra** and **sf**. Then load target area borders and visualize it (**hint**: Barcelona county shape file is in `shape/bcn.shp`).

```{r}
bcn_vect <- vect("exercises/StudentRdata/bcn/shape/bcn.shp")
```

```{r}
plot(bcn_vect)
```

2. Rasterize target area with a pixel side size of 500m. Then intersect the raster with target area boundaries to finally create a `sf object` in which each line corresponds to each pixel of the target area (**hint**: use functions `terra::rast()`, `terra::intersect()` and `sf::st_as_sf()`).

```{r}
## specify raster resolution
res <- 500
## create a base raster 
base_sr <- rast(
  x          = ext(bcn_vect),
  resolution = c(res, res),
  crs        = "EPSG:25831"
)
## intersection to keep target locations
target_lst <- terra::intersect(as.points(base_sr), bcn_vect)
## convert to sf
target_sf <- st_as_sf(target_lst) |> select(geometry)
```

3. From now, landscape initialization consist in adding columns in the `sf object` that contain specific data for each pixel that latter would be used to carry out **medfateland** simulations. First, start adding topographic features. Check if missing values are present and if yes, filter that lines. Finally, visualize the elevation map (**hint**: topographic data is stored in `dem.tif` raster file. Use functions `add_topography()`, `check_topography()` and `plot_variable()`).

```{r}
## load dem
dem_sr <- rast("exercises/StudentRdata/bcn/dem.tif")
## add topography to dem
topo_bcn0_sf <- add_topography(target_sf, dem_sr)
```

```{r}
check_topography(topo_bcn0_sf)
```

```{r}
topo_bcn0_sf <- filter(topo_bcn0_sf, !is.na(slope))
```

```{r}
plot_variable(topo_bcn0_sf, "elevation", r = base_sr)
```

4. Load a land cover map and classify land cover elements in to the five land cover types used in **medfateland** (**hint**: land cover types: **agriculture**, **wildland**, **artificial**, **rock**, and **water**). Then add land cover type to the `sf object`, check for missing values and visualize it (**hint**: land cover data is stored in `cob.tif` raster file. Use functions `add_land_cover()`, `check_land_cover()` and `plot_variable()`)

```{r}
## land cover types
cob_sr <- rast("exercises/StudentRdata/bcn/cob.tif")
## reclassify land cover
cob_bnc1_sf <- add_land_cover(
  x              = topo_bcn0_sf,
  land_cover_map = cob_sr,
  wildland       = c(7:17, 20),
  agriculture    = 1:6,
  rock           = 18:19,
  artificial     = 21:35,
  water          = 36:41
)
```

```{r}
check_land_cover(cob_bnc1_sf)
```

```{r}
plot_variable(cob_bnc1_sf, "land_cover_type", r = base_sr)
```

5. Define forest objects in the wildland pixels. To define forest objects you need a forest map with dominant tree species (`mfe/mfe25_cat_class.shp`) and forest inventory data from nearby locations (`ifn4.rds`). Use `impute_forests()` and inspect function console output to check the result (**hint**: you can also use `check_forest()` function). Is there any forest class missing? How could yo deal with this missing data? (**hint**: reed the documentation of `impute_forests()` function)


```{r}
## add forest obj
mfe_vect <- vect("exercises/StudentRdata/bcn/mfe/mfe25_cat_class.shp")
## load IFN4 data
ifn4_sf <- read_rds("exercises/StudentRdata/bcn/ifn4.rds")
```

```{r}
forest_bcn2_sf <- impute_forests(
  x          = cob_bnc1_sf,
  sf_fi      = ifn4_sf,
  dem        = dem_sr,
  forest_map = mfe_vect
)
```

```{r}
check_forests(forest_bcn2_sf)
```

6. As imputed forest inventory plots and our study area pixels have different sizes, we should correct forest structure (i.e. DBH, height and number of trees in each cohort). For that, we need vegetation spatial information that can be derived from LiDAR flights, for example. Thus, next step is use tree height (`tree_height.tif`) and basal area (`tree_ba.tif`) maps to correct forest structure (**hint**: use `modify_forest_structure()` function. Both maps need to be resampled by a `fact=2`, you can use `aggregate()` and `crop()` functions from `terra` package. Note that tree height map is in meters while `height`in `forest object`is in cm). To conclude, visualize a forest object before and after structure correction. What has changed?


```{r}
## chm from lidar
chm_sr <- rast("exercises/StudentRdata/bcn/tree_height.tif")
## resample the raster
chm_sr <- aggregate(
  crop(chm_sr, base_sr),
  fact = 2,
  fun = "mean",
  na.rm = TRUE
)
## convert to cm
chm_sr <- chm_sr * 100
```

```{r}
## basal area from lidar
ba_sr <- rast("exercises/StudentRdata/bcn/tree_ba.tif")
## resample the raster
ba_sr <- aggregate(
  crop(ba_sr, base_sr),
  fact  = 2,
  fun   = "mean",
  na.rm = TRUE
)
```

```{r}
bcn3_sf <- modify_forest_structure(
  x             = forest_bcn2_sf,
  structure_map = chm_sr,
  var           = "mean_tree_height"
)
```

```{r}
bcn4_sf <- modify_forest_structure(
  x             = bcn3_sf,
  structure_map = ba_sr,
  var           = "basal_area"
)
```

```{r}
forest_bcn2_sf$forest[[4]]$treeData

bcn4_sf$forest[[4]]$treeData
```

7. Add soil characteristics for each pixel from Soil Grids dataset. Check the result and add default soil characteristics to fill any missing data (**hint**: soil data is stored in `soilgrids_path = prueba/4a/bcn/SoilGrids/Spain/`. Use `add_soils()` and `chekc_soils()` functions. Also, use the following `default_values = c(clay = 25, sand = 25, bd = 1.5, rfc = 25)`)

```{r}
## load soil data
bcn5_sf <- add_soilgrids(
  x              = bcn4_sf,
  soilgrids_path = "exercises/StudentRdata/bcn/SoilGrids/Spain/"
)
```

```{r}
check_soils(bcn5_sf)
```

```{r}
bcn6_sf <- check_soils(
  bcn5_sf,
  missing_action = "default",
  default_values = c(
    clay = 25,
    sand = 25,
    bd   = 1.5,
    rfc  = 25
  )
)
```

8. Check if the landscape is correctly initialized and store the data (**hint**: use `initialize_landscape()` function)

```{r}
landscape_sf <- initialize_landscape(
  x             = bcn6_sf,
  SpParams      = SpParamsMED,
  local_control = defaultControl()
)
```


```{r}
write_rds(landscape_sf, "exercises/StudentRdata/bcn/landscape.rds")
```
---
title: "Forest water and energy balance (practice)"
title-slide-attributes: 
  data-background-color: "#672178"
format:
  revealjs:
    embed-resources: true
    df-print: default
    incremental: true
    smaller: false
    logo: resources/img/emf_logo.svg
    theme: [default, resources/scss/custom.scss]
editor: source
author: "Miquel De CÃ¡ceres, Rodrigo Balaguer"
institute: "Ecosystem Modelling Facility, CREAF"
toc: false
toc-depth: 2
number-sections: false
slide-number: true
progress: true
---

# Outline {background-color="#672178"}

::::: columns
::: {.column width="40%"}
1. Water balance input object
2. Basic water balance
3. Evaluating model performance
4. Advanced water/energy balance
5. Modifying model inputs
:::

::: {.column width="60%"}
![M.C. Escher - Night and day, 1938](resources/img/Escher_nightday.jpg)
:::
:::::

```{r, include = FALSE}
library(medfate)
library(sp)
library(ggplot2)
```

# 1. Water balance input object

## Creating the water balance input object {.smaller}

We assume we have an appropriate `forest` object and species parameter data frame:

```{r, echo = TRUE}
data(exampleforest)
data(SpParamsMED)
```

. . .

a soil description data frame:

```{r, echo = TRUE}
examplesoil <- defaultSoilParams(4)
```

. . .

and a simulation control list:

```{r, echo = TRUE}
control <- defaultControl(transpirationMode = "Granier", soilDomains = "buckets")
```

. . .

::: callout-important
+ Plant transpiration (`transpirationMode`) should be `"Granier"` (basic), `"Sperry"` (advanced with Sperry) or `"Sureau"` (advanced with Sureau-ECOS).

+ Soil water movement (`soilDomains`) should be `"buckets"` (multi-bucket), `"single"` (single-domain) or `"dual"` (dual-permeability).
:::

. . .

With these four elements we can build our input object for function `spwb()`:

```{r, echo = TRUE}
x <- spwbInput(exampleforest, examplesoil, SpParamsMED, control)
```

::: footer
1.  Water balance input object
:::

## Structure of the water balance input object (1) {.smaller}

The water balance input object is a `list` with several elements:

```{r, echo = TRUE}
names(x)
```

. . .

Element `soil` contains the (initialized) soil data frame:

```{r, echo = TRUE}
x$soil
```

. . .

Element `cohorts` contains the species identity of each cohort:

```{r, echo = TRUE}
x$cohorts
```

::: footer
1.  Water balance input object
:::

## Structure of the water balance input object (2) {.smaller}

Element `above` contains above-ground description of vegetation:

```{r, echo = TRUE}
x$above
```

. . .

Element `below` contains below-ground description of vegetation:

```{r, echo = TRUE}
x$below
```

. . .

Elements `params*` contain cohort-level parameters, for example...

```{r, echo = TRUE}
x$paramsTranspiration
```

::: footer
1.  Water balance input object
:::

# 2. Basic water balance {background-color="#672178"}

## Water balance run {.smaller}

Let us assume we have an appropriate weather data frame:

```{r, echo = TRUE}
data(examplemeteo)
```

. . .

The call to function `spwb()` needs the water balance input object, the weather data frame, latitude and elevation:

```{r, echo = TRUE, eval = TRUE}
S <- spwb(x, examplemeteo, latitude = 41.82592, elevation = 100)
```

::: footer
2.  Basic water balance
:::

## Water balance output object (1) {.smaller}

Function `spwb()` returns an object of class with the same name, actually a list:

```{r, echo = TRUE}
class(S)
```

. . .

It is interesting to inspect the list element names:

```{r, echo = TRUE}
names(S)
```

. . .

| Elements | Information |
|------------------------------------|------------------------------------|
| `latitude`, `topography`, `weather`, `spwbInput` | Copies of the information used in the call to `spwb()` |
| `spwbOutput` | State variables at the end of the simulation (can be used as input to a subsequent one) |
| `WaterBalance`, `Soil`, `Snow`, `Stand`, `Plants` | Daily outputs |

::: footer
2.  Basic water balance
:::

## Water balance output object (2) {.smaller}

Daily outputs are `data.frame` objects with **dates as row names** and **variables in columns**, for example:

```{r, echo = TRUE}
head(S$WaterBalance, 2)
```

. . .

`Soil` is itself a list with several data frames with different results by soil layer:

```{r, echo = TRUE}
names(S$Soil)
```

. . .

Likewise, `Plants` is itself a list with several data frames with different results by cohort:

```{r, echo = TRUE}
names(S$Plants)
```

::: footer
2.  Basic water balance
:::

## Accessing and summarizing model result {.smaller}

**Summary function**

The package provides a `summary()` function for objects of class `spwb`. It can be used to extract/summarize the model's output at different temporal steps (i.e. weekly, annual, ...).

For example, to aggregate water balance results by months one can use:

```{r, echo = TRUE, eval = FALSE}
summary(S, freq="months",FUN=sum, output="WaterBalance")
```

. . .

Parameter `output` indicates the element of the `spwb` object for which we desire a summary. Similarly, it is possible to calculate the average stress of plant cohorts by months:

```{r, echo = TRUE, eval = FALSE}
summary(S, freq="months",FUN=mean, output="PlantStress")
```

. . .

**Extraction function**

Post-processing is much more convenient using function `extract()` which extracts model results in a format compatible with **tidyverse** manipulation.

For example, the following returns all stand level results by date:

```{r, echo = TRUE, eval = FALSE}
extract(S, level = "forest")
```

::: footer
2.  Basic water balance
:::

## Plotting {.smaller}

The package provides a `plot()` function for objects of class `spwb`. It can be used to show weather inputs and different components of the water balance, for example:

```{r, echo = TRUE, fig=TRUE, fig.width=6, fig.height = 4}
plot(S, type = "PET_Precipitation")
```

The help page of `?plot.spwb` lists all the possible plots...

. . .

... but instead of typing all plots, we can explore them all by calling the interactive function `shinyplot()`:

```{r, eval = FALSE, include = TRUE, echo = TRUE}
shinyplot(S)
```

::: footer
2.  Basic water balance
:::

# 3. Evaluating model performance {background-color="#672178"}

## Observed data and evaluation metrics {.smaller}

The package provides functions to compare predictions with observations (use `?evaluation` for details on how observations should be arranged).

. . .

The package includes a (fake) example data set of observed data:

```{r}
head(exampleobs)
```

Note the observation dates in `dates` column. The remaining variables are observations to be matched with simulation results.

. . .

A single evaluation metric for soil water content can be calculated using:

```{r, echo = TRUE}
evaluation_metric(S, exampleobs, type = "SWC", metric = "MAE")
```

. . .

or many of them:

```{r, echo = TRUE}
evaluation_stats(S, exampleobs, type = "SWC")
```

::: footer
3.  Evaluating model performance
:::

## Evaluation plots and interactive evaluation {.smaller}

Evaluation functions also allow visualizing the comparison as *time series* or *scatter* plots:

```{r, echo = TRUE, fig=TRUE, fig.align="center", fig.width=9, fig.height = 3}
evaluation_plot(S, exampleobs, type = "SWC", plotType = "dynamics")
```

. . .

Alternatively, the observed data can be supplied as an additional parameter to `shinyplot()` for interactive graphics including model evaluation:

```{r, echo = TRUE, eval = FALSE}
shinyplot(S, exampleobs)
```

::: footer
3.  Evaluating model performance
:::

# 4. Advanced water/energy balance {background-color="#672178"}

## Creating an input object for the advanced model {.smaller}

The most important step to run the advanced model is to specify the appropriate transpiration mode in the `control` parameters:

```{r, echo = TRUE}
control <- defaultControl("Sperry")
```

. . .

If we want to plot sub-daily results, we must specify it as follows:

```{r, echo = TRUE}
control$subdailyResults <- TRUE
```

. . .

We can build our input object for function `spwb()` using the same function as before:

```{r, echo = TRUE}
x_adv <- spwbInput(exampleforest, examplesoil, SpParamsMED, control)
```

. . .

The water balance input object contains the same elements...

```{r, echo = TRUE}
names(x_adv)
```

::: footer
4.  Advanced water/energy balance
:::

## Vulnerability curves and supply functions {.smaller}

We can inspect *hydraulic vulnerability curves* (i.e. how hydraulic conductance of a given segment changes with the water potential) for each plant cohort and each of the different segments of the soil-plant hydraulic network:

```{r, fig=TRUE, fig.align="center", fig.width=10, fig.height = 3.5, echo = TRUE}
g1 <- hydraulics_vulnerabilityCurvePlot(x_adv, type="stem", speciesNames = TRUE)
g2 <- hydraulics_vulnerabilityCurvePlot(x_adv, type="leaf", speciesNames = TRUE)
cowplot::plot_grid(g1, g2, ncol = 2)
```

::: footer
4.  Advanced water/energy balance
:::

## Water/energy balance run for a single day (1) {.smaller}

Since the model operates at a daily and sub-daily temporal scales, it is possible to perform soil water balance for one day only. First we need a weather vector:

```{r, echo = TRUE}
d = 100
meteovec <- unlist(examplemeteo[d,-1])
meteovec
```

and a string with the target date:

```{r}
date <- as.character(examplemeteo$dates[d])
date
```

At this point, we can call function `spwb_day()`

```{r, echo = TRUE}
sd1<-spwb_day(x_adv, date, meteovec, 
             latitude = 41.82592, elevation = 100, 
             slope= 0, aspect = 0)
```

. . .

::: callout-warning
By default, a call to `spwb_day()` will modify the input object. This behavior can be deactivated by using `modifyInput = FALSE` in the simulation call (see also `?resetInputs`).
:::

::: footer
4.  Advanced water/energy balance
:::

## Water/energy balance run for a single day (2) {.smaller}

As with `spwb()`, there is a plot function for results of `spwb_day()`. For example we can use:

```{r, echo = TRUE, fig=TRUE, fig.align="center", fig.width=8, fig.height = 3.0}
plot(sd1, type = "LeafTranspiration", bySpecies = TRUE)
```

. . .

More conveniently, you can examine multiple plots interactively:

```{r, eval=FALSE, echo=TRUE}
shinyplot(sd1)
```

::: footer
4.  Advanced water/energy balance
:::

## Water/energy balance run for multiple days {.smaller}

We can now run the advanced water balance model (which takes 15 sec. aprox.)

```{r, eval = FALSE, echo = TRUE}
S_adv <- spwb(x_adv, examplemeteo, latitude = 41.82592, elevation = 100)
```

```{r, echo = FALSE}
# saveRDS(S_adv, "Rdata/spwb_adv.rds")
S_adv <- readRDS("Rdata/spwb_adv.rds")
```

. . .

Function `spwb()` returns a list of class `spwb`, like the basic water balance model, but which contains more information:

```{r}
names(S_adv)
```

. . .

As before, post-processing of simulation results can be done using functions `summary()`, `extract()` or `plot()`:

```{r, echo = TRUE, eval = TRUE, fig.width=8, fig.height=3.0}
plot(S_adv, type="LeafPsiRange", bySpecies = TRUE)
```

. . .

Alternatively, one can interactively create plots using function `shinyplot()`, e.g.:

```{r, eval = FALSE, echo = TRUE}
shinyplot(S_adv)
```

::: footer
4.  Advanced water/energy balance
:::

# 5. Modifying model inputs {background-color="#672178"}

## Modifying forest input data {.smaller}

Medfate uses allometric equations to estimate structural properties such as leaf area index (LAI) or the crown ratio (CR).

. . .

Let's imagine one is not happy with a particular cohort parameter. For example, LAI estimates produced by `spwbInput()` do not match known values:

```{r, echo = TRUE}
x_adv$above$LAI_live
```

. . .

One possibility is to specify LAI values directly in the `forest` object, as can be found in the example dataset:

```{r, echo = TRUE}
exampleforest2
```

::: footer
5.  Modifying model inputs
:::

## Modifying species and cohort parameters {.smaller}

**Species-level parameters**

Advanced users may desire to have control on species-level parameter values used in simulation.

. . .

One can use function `modifySpParams()` to modify values in the species parameter table (we could also do it manually).

. . .

**Cohort-level parameters**

Cohort-level parameters may also be modified. However, one should not manually modify simulation input objects (e.g. `x_adv`) because some parameters are related and we may break their relationships.

. . .

Instead, function `modifyInputParams()` is recommended:

```{r, echo = TRUE, eval = TRUE}
x_mod <- modifyInputParams(x_adv, c("T2_168/VCstem_d" = -7.0))
```

which will display messages describing the parameters that are modified.

::: footer
5.  Modifying model inputs
:::

#  {background-color="#672178"}

![M.C. Escher - Night and day, 1938](resources/img/Escher_nightday.jpg)
